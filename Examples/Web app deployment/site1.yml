---
- name: A simple Load Balanced AWS server
  hosts: localhost 
  connection: local
  gather_facts: False
  tasks:
    - name: Create security group
      ec2_group:
        name: "common_security_group"
        description: "common security group"
        region: "{{ region }}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: common_firewall

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ pem_key }}"
        region: "{{ region }}"
        group_id: "{{ common_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            env: "{{ env }}"
        count_tag: env
        exact_count: 2
        vpc_subnet_id: subnet-7060380a
        assign_public_ip: yes
        aws_access_key: AKIAUBU6DPBW3M4TKU7H
        aws_secret_key: 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
      register: ec2

    - name: wait for the servers to appear on the network
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22 
        # delay: 10# 
        timeout: 180 
        # state: started#
      with_items: "{{ ec2.tagged_instances }}"

    - name: add server ip addresses to hosts group
      add_host: 
        hostname: "{{ item.public_ip }}" 
        groupname: launched
      with_items: "{{ ec2.tagged_instances }}"

    - name: Add EC2 instances as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2.tagged_instances }}"
    - name: Gathering ec2 facts
      action: ec2_facts
    - name: Instance De-register
      local_action:
        module: ec2_elb
        instance_id: "{{ item.id }}"
        state: absent
        region: us-east-2
      with_items: "{{ ec2.tagged_instances }}"
    

- name: webservers (installs nginx ...)
  hosts: launched
  remote_user: ubuntu
  become: true
  become_method: sudo
  gather_facts: False 
  pre_tasks:
      - name: 'install python2'
        raw: sudo apt-get -y install python
  roles:
    - web


- name: A simple Load Balanced AWS server
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
  - name: Create the ELB only listening over port 80
    ec2_elb_lb:
      name: load-balancer-test
      state: present
      region: us-east-2
      zones:
        - us-east-2c
          # health_check:
          #ping_protocol: http # options are http, https, ssl, tcp
          #ping_port: 8080
          #ping_path: "/index.html" # not required for tcp or ssl
          #response_timeout: 5 # seconds
          #interval: 30 # seconds
          #unhealthy_threshold: 2
          #healthy_threshold: 10
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
    register: common-elb

  - name: Instance Register
    local_action:
      module: ec2_elb
      instance_id: "{{ item.id }}"
      ec2_elbs: load-balancer-test
      state: present
      region: us-east-2
    with_items: "{{ ec2.tagged_instances }}"

